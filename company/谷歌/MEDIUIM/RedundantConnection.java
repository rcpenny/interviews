// 在这个问题中，树是一个连接的、无环的无向图。

// 给定的输入是一个图形，它以具有N个节点（具有不同的值1,2，...，N）的树开始，并添加了一条额外的边。
//  添加的边有两个不同的顶点（从1到N中选择），并且不是已经存在的边。

// 得到的图形以关于边的 2D-数组的形式给出。 边的每个元素是一对[u，v]，其中u <v，这表示连接节点u和v的无向边。

// 你需要输出可以删除的边，以便生成的图是一棵N个节点的树。 如果有多个答案，则返回给定2D数组中最后出现的答案边。 
// 答案边[u，v]应该采用相同的格式，u <v。

// 输入:  [[1,2], [2,3], [3,4], [1,4], [1,5]]
// 输出:  [1,4]	
// 解释:
// 	图如下：
// 	5 - 1 - 2
// 	    |   |
// 	    4 - 3
// Notice
// 输入2D数组的大小将介于3和1000之间。
// 2D数组中的每个整数都在1和N之间，其中N是输入数组的大小。

public class RedundantConnection {
  public int[] findRedundantConnection(int[][] edges) {
    
  }
}